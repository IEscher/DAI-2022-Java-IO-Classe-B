package ch.heigvd.api.labio.impl.transformers;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 *       *** IMPORTANT WARNING : DO NOT EDIT THIS FILE ***
 *
 * This file is used to specify what you have to implement. To check your work,
 * we will run our own copy of the automated tests. If you change this file,
 * then you will introduce a change of specification!!!
 *
 * @author Juergen Ehrensberger
 */
public class CombinedCharTransformerTest {

    private String transform(String input) {
        UpperCaseCharTransformer transformer1 = new UpperCaseCharTransformer();
        LineNumberingCharTransformer transformer2 = new LineNumberingCharTransformer();
        StringBuilder output = new StringBuilder();
        for (int i=0; i<input.length(); i++) {
            String s = Character.toString(input.charAt(i));
            output.append(transformer2.transform(transformer1.transform(s)));
        }
        return output.toString();
    }

    private String transformCombinaison(String input) {
        CombinedTransformer transformer = new CombinedTransformer();
        StringBuilder output = new StringBuilder();
        for (int i=0; i<input.length(); i++) {
            String s = Character.toString(input.charAt(i));
            output.append(transformer.transform(s));
        }
        transformer.resetLineTransformer();
        return output.toString();
    }

    @Test
    public void itShouldTransformCharacters() {
        String source = "abcdefgABCDEFG\t12345 !?'.\r\nAnother Line...\nThird Line.\r\n";
        String target = "1. ABCDEFGABCDEFG\t12345 !?'.\n2. ANOTHER LINE...\n3. THIRD LINE.\n4. ";
        assertEquals(target, transform(source));
    }

    /* Additional tests concerning switch between \n & \r + CombinedTransformer */
    @Test
    public void withRAndNSwitched() {
        String source = "abcdefgABCDEFG\t12345 !?'.\n\rAnother Line...\nThird Line.\n\r";
        String target = "1. ABCDEFGABCDEFG\t12345 !?'.\n2. ANOTHER LINE...\n3. THIRD LINE.\n4. ";
        assertEquals(target, transform(source));
    }

    @Test
    public void withAdditionalR() {
        String source = "abcdefg\rABCDEFG\t123\r45 !?'.\n\rAnother\r Line...\nThird Line.\n\r";
        String target = "1. ABCDEFGABCDEFG\t12345 !?'.\n2. ANOTHER LINE...\n3. THIRD LINE.\n4. ";
        assertEquals(target, transform(source));
    }

    @Test
    public void combinedTransformerClass() {
        String source = "abcdefg\rABCDEFG\t123\r45 !?'.\n\rAnother\r Line...\nThird Line.\n\r";
        String target = "1. ABCDEFGABCDEFG\t12345 !?'.\n2. ANOTHER LINE...\n3. THIRD LINE.\n4. ";
        assertEquals(target, transformCombinaison(source));
    }

    @Test
    public void combinedTransfStartingWithN() {
        String source = "\nabcdefg\rABCDEFG\t123\r45 !?'.\n\rAnother\r Line...\nThird Line.\n\r";
        String target = "1. \n2. ABCDEFGABCDEFG\t12345 !?'.\n3. ANOTHER LINE...\n4. THIRD LINE.\n5. ";
        assertEquals(target, transformCombinaison(source));
    }

    @Test
    public void combinedTransfStartingWithNR() {
        String source = "\n\rabcdefg\rABCDEFG\t123\r45 !?'.\n\rAnother\r Line...\nThird Line.\n\r";
        String target = "1. \n2. ABCDEFGABCDEFG\t12345 !?'.\n3. ANOTHER LINE...\n4. THIRD LINE.\n5. ";
        assertEquals(target, transformCombinaison(source));
    }

    @Test
    public void combinedTransfStartingWithRN() {
        String source = "\r\nabcdefg\rABCDEFG\t123\r45 !?'.\n\rAnother\r Line...\nThird Line.\n\r";
        String target = "1. \n2. ABCDEFGABCDEFG\t12345 !?'.\n3. ANOTHER LINE...\n4. THIRD LINE.\n5. ";
        assertEquals(target, transformCombinaison(source));
    }

    @Test
    public void combinedTransformerWithEmptyFile() {
        /* Because source length equals 0, so it will not do transformation */
        String source = "";
        String target = "";
        assertEquals(target, transformCombinaison(source));
    }

    @Test
    public void combinedTransformerWithOneSpace() {
        String source = " ";
        String target = "1.  ";
        assertEquals(target, transformCombinaison(source));
    }
}
